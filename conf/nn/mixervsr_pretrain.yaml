data:
  _target_: vsr.data.datamodule.DataModuleVSR

  datasets:
    train:
      _target_: vsr.data.dataset.DatasetVSR
      path: "/home/hdd/vsr/REDS"
      split: "train"
      seq: 15
      scale: 4
      size: 0.9
      hr_augmentation:
        - _target_: kornia.augmentation.RandomCrop
          size: [512, 512]
          pad_if_needed: True
          same_on_batch: True
          keepdim: True

        - _target_: kornia.augmentation.Resize
          size: [ 256, 256 ]
          keepdim: True

        - _target_: kornia.augmentation.RandomHorizontalFlip
          p: 0.5
          same_on_batch: True
          keepdim: True

        - _target_: kornia.augmentation.RandomVerticalFlip
          p: 0.5
          same_on_batch: True
          keepdim: True

        - _target_: core.augmentations.Mirroring

      lr_augmentation:
        - _target_: kornia.augmentation.RandomGaussianBlur
          kernel_size: 7
          sigma: [ 0.2, 3 ]
          same_on_batch: False
          p: 0.8
          keepdim: True

        - _target_: kornia.augmentation.ColorJitter
          p: 0.7
          brightness: 0.1
          contrast: 0.2
          saturation: 0.1
          hue: 0.2
          same_on_batch: False
          keepdim: True

        - _target_: core.augmentations.RandomJPEGCompression
          quality: [ 30, 90 ]

        - _target_: kornia.augmentation.RandomGaussianBlur
          kernel_size: 9
          sigma: [ 0.2, 3 ]
          same_on_batch: False
          keepdim: True
          p: 0.8

        - _target_: kornia.augmentation.RandomGaussianNoise
          mean: 0.1
          std: 0.5
          same_on_batch: False
          keepdim: True
          p: 0.7

        - _target_: kornia.augmentation.RandomGaussianBlur
          kernel_size: 5
          sigma: [ 0.2, 3 ]
          same_on_batch: False
          keepdim: True
          p: 0.7

        - _target_: core.augmentations.RandomJPEGCompression
          quality: [ 30, 70 ]

        - _target_: core.augmentations.RandomVideoCompression
          codec: [ 'libx264', 'h264', 'mpeg4' ]
          crf: [ 30, 40 ]
          fps: [ 15, 30 ]

        - _target_: kornia.augmentation.Resize
          size: [ 64, 64 ]

    val:
      _target_: vsr.data.dataset.DatasetVSR
      path: "/home/hdd/vsr/REDS"
      split: "val"
      seq: 15
      scale: 4
      size: 0.1
      hr_augmentation:
        - _target_: kornia.augmentation.RandomCrop
          size: [512, 512]
          pad_if_needed: True
          same_on_batch: True
          keepdim: True

        - _target_: kornia.augmentation.Resize
          keepdim: True
          size: [ 256, 256 ]

      lr_augmentation:
        - _target_: kornia.augmentation.RandomGaussianBlur
          kernel_size: 5
          keepdim: True
          sigma: [ 0.2, 3 ]
          same_on_batch: True
          p: 0.7

        - _target_: core.augmentations.RandomVideoCompression
          codec: [ 'libx264', 'h264', 'mpeg4' ]
          crf: [ 30, 40 ]
          fps: [ 15, 30 ]

        - _target_: kornia.augmentation.Resize
          size: [ 64, 64 ]

  num_workers:
    train: 0
    val: 0

  batch_size:
    train: 4
    val: 1

module:
  _target_: vsr.pl_module.pl_module.LitRealVSR
  model:
    _target_: vsr.modules.mixervsr.MixerVSR
    img_size: [64, 64]
    steps: 3
    mid_ch: 64
    it_blocks: 15
    patch_size: 8
    time_dim: ${nn.data.datasets.train.seq}
    exp: 2
    mix_blocks: 20
    conv_blocks: 20
    upscale: ${nn.data.datasets.train.scale}

  loss:
    _target_: core.losses.WL1Loss
    weight: 1.0

  metric:
    _target_: torchmetrics.MetricCollection
    metrics:
      - _target_: torchmetrics.PeakSignalNoiseRatio
        data_range: 1

  optimizer:
    _target_: torch.optim.Adam
    lr: 1e-3
    betas: [ 0.9, 0.999 ]
    eps: 1e-08
    weight_decay: 0

  scheduler:
    _target_: torch.optim.lr_scheduler.CosineAnnealingLR
    T_max: ${train.trainer.max_epochs}
    eta_min: 1e-5
    verbose: False

  log_interval: 250
  log_k_images: 5


